"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –Ω–∞–ø–∏—Å–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤.
"""
import configparser
from configparser import ConfigParser, SectionProxy
import codecs
import os

from Utils.exceptions import (ParamNotFoundError, EmptyValueError, ValueNotValidError, SectionNotFoundError,
                              ConfigParseError, ProductsFileNotFoundError, NoProductVarError,
                              SubCommandAlreadyExists, DuplicateSectionErrorWrapper)
from Utils.cardinal_tools import hash_password


def check_param(param_name: str, section: SectionProxy, valid_values: list[str | None] | None = None,
                raise_if_not_exists: bool = True) -> str | None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –µ—Å–ª–∏ –¥–∞, –≤–∞–ª–∏–¥–Ω–æ –ª–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ.

    :param param_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
    :param section: –æ–±—ä–µ–∫—Ç —Å–µ–∫—Ü–∏–∏.
    :param valid_values: –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ï—Å–ª–∏ None, –ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    :param raise_if_not_exists: –≤–æ–∑–±—É–∂–¥–∞—Ç—å –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.

    :return: –ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞, –µ—Å–ª–∏ –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ. –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏
    raise_ex_if_not_exists == False - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None. –í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
    """
    if param_name not in list(section.keys()):
        if raise_if_not_exists:
            raise ParamNotFoundError(param_name)
        return None

    value = section[param_name].strip()

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ ("", –æ–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None)
    if not value:
        if valid_values and None in valid_values:
            return value
        raise EmptyValueError(param_name)

    if valid_values and valid_values != [None] and value not in valid_values:
        raise ValueNotValidError(param_name, value, valid_values)
    return value


def create_config_obj(config_path: str) -> ConfigParser:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.

    :param config_path: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥–∞.

    :return: –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥–∞.
    """
    config = ConfigParser(delimiters=(":",), interpolation=None)
    config.optionxform = str
    config.read_file(codecs.open(config_path, "r", "utf8"))
    return config


def load_main_config(config_path: str):
    """
    –ü–∞—Ä—Å–∏—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥.

    :param config_path: –ø—É—Ç—å –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.

    :return: —Å–ø–∞—Ä—Å–µ–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥.
    """
    config = create_config_obj(config_path)
    values = {
        "FunPay": {
            "golden_key": "any",
            "user_agent": "any+empty",
            "autoRaise": ["0", "1"],
            "autoResponse": ["0", "1"],
            "autoDelivery": ["0", "1"],
            "multiDelivery": ["0", "1"],
            "autoRestore": ["0", "1"],
            "autoDisable": ["0", "1"],
            "oldMsgGetMode": ["0", "1"],
            "keepSentMessagesUnread": ["0", "1"],
            "locale": ["ru", "en", "uk"]
        },

        "Telegram": {
            "enabled": ["0", "1"],
            "token": "any+empty",
            "secretKeyHash": "any",
            "blockLogin": ["0", "1"]
        },

        "BlockList": {
            "blockDelivery": ["0", "1"],
            "blockResponse": ["0", "1"],
            "blockNewMessageNotification": ["0", "1"],
            "blockNewOrderNotification": ["0", "1"],
            "blockCommandNotification": ["0", "1"]
        },

        "NewMessageView": {
            "includeMyMessages": ["0", "1"],
            "includeFPMessages": ["0", "1"],
            "includeBotMessages": ["0", "1"],
            "notifyOnlyMyMessages": ["0", "1"],
            "notifyOnlyFPMessages": ["0", "1"],
            "notifyOnlyBotMessages": ["0", "1"],
            "showImageName": ["0", "1"]
        },

        "Greetings": {
            "ignoreSystemMessages": ["0", "1"],
            "onlyNewChats": ["0", "1"],
            "sendGreetings": ["0", "1"],
            "greetingsText": "any",
            "greetingsCooldown": "any"
        },

        "OrderConfirm": {
            "watermark": ["0", "1"],
            "sendReply": ["0", "1"],
            "replyText": "any"
        },

        "ReviewReply": {
            "star1Reply": ["0", "1"],
            "star2Reply": ["0", "1"],
            "star3Reply": ["0", "1"],
            "star4Reply": ["0", "1"],
            "star5Reply": ["0", "1"],
            "star1ReplyText": "any+empty",
            "star2ReplyText": "any+empty",
            "star3ReplyText": "any+empty",
            "star4ReplyText": "any+empty",
            "star5ReplyText": "any+empty",
        },

        "Proxy": {
            "enable": ["0", "1"],
            "ip": "any+empty",
            "port": "any+empty",
            "login": "any+empty",
            "password": "any+empty",
            "check": ["0", "1"]
        },

        "Other": {
            "watermark": "any+empty",
            "requestsDelay": [str(i) for i in range(1, 101)],
            "language": ["ru", "en", "uk"]
        }
    }

    for section_name in values:
        if section_name not in config.sections():
            raise ConfigParseError(config_path, section_name, SectionNotFoundError())

        # UPDATE
        if section_name == "Greetings" and "cacheInitChats" in config[section_name]:
            config.remove_option(section_name, "cacheInitChats")
            with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                config.write(f)
        # END OF UPDATE

        for param_name in values[section_name]:

            # UPDATE
            if section_name == "FunPay" and param_name == "oldMsgGetMode" and param_name not in config[section_name]:
                config.set("FunPay", "oldMsgGetMode", "0")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "Greetings" and param_name == "ignoreSystemMessages" and param_name not in config[
                section_name]:
                config.set("Greetings", "ignoreSystemMessages", "0")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "Other" and param_name == "language" and param_name not in config[section_name]:
                config.set("Other", "language", "ru")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "Other" and param_name == "language" and config[section_name][param_name] == "eng":
                config.set("Other", "language", "en")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "Greetings" and param_name == "greetingsCooldown" and param_name not in config[
                section_name]:
                config.set("Greetings", "greetingsCooldown", "2")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "OrderConfirm" and param_name == "watermark" and param_name not in config[
                section_name]:
                config.set("OrderConfirm", "watermark", "1")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "FunPay" and param_name == "keepSentMessagesUnread" and \
                    param_name not in config[section_name]:
                config.set("FunPay", "keepSentMessagesUnread", "0")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "NewMessageView" and param_name == "showImageName" and \
                    param_name not in config[section_name]:
                config.set("NewMessageView", "showImageName", "1")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "Telegram" and param_name == "blockLogin" and \
                    param_name not in config[section_name]:
                config.set("Telegram", "blockLogin", "0")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "Telegram" and param_name == "secretKeyHash" and \
                    param_name not in config[section_name]:
                config.set(section_name, "secretKeyHash", hash_password(config[section_name]["secretKey"]))
                config.remove_option(section_name, "secretKey")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "FunPay" and param_name == "locale" and \
                    param_name not in config[section_name]:
                config.set(section_name, "locale", "ru")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "Other" and param_name == "watermark" and \
                    param_name in config[section_name] and "ùë™ùíÇùíìùíÖùíäùíèùíÇùíç" in config[section_name][param_name]:
                config.set(section_name, param_name, "üê¶")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)
            elif section_name == "Greetings" and param_name == "onlyNewChats" and param_name not in config[
                section_name]:
                config.set("Greetings", "onlyNewChats", "0")
                with open("configs/_main.cfg", "w", encoding="utf-8") as f:
                    config.write(f)

            # END OF UPDATE

            try:
                if values[section_name][param_name] == "any":
                    check_param(param_name, config[section_name])
                elif values[section_name][param_name] == "any+empty":
                    check_param(param_name, config[section_name], valid_values=[None])
                else:
                    check_param(param_name, config[section_name], valid_values=values[section_name][param_name])
            except (ParamNotFoundError, EmptyValueError, ValueNotValidError) as e:
                raise ConfigParseError(config_path, section_name, e)

    return config


def load_auto_response_config(config_path: str):
    """
    –ü–∞—Ä—Å–∏—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∫–æ–º–∞–Ω–¥.

    :param config_path: –ø—É—Ç—å –¥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–æ–º–∞–Ω–¥.

    :return: —Å–ø–∞—Ä—Å–µ–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∫–æ–º–∞–Ω–¥.
    """
    try:
        config = create_config_obj(config_path)
    except configparser.DuplicateSectionError as e:
        raise ConfigParseError(config_path, e.section, DuplicateSectionErrorWrapper())

    command_sets = []
    for command in config.sections():
        try:
            check_param("response", config[command])
            check_param("telegramNotification", config[command], valid_values=["0", "1"], raise_if_not_exists=False)
            check_param("notificationText", config[command], raise_if_not_exists=False)
        except (ParamNotFoundError, EmptyValueError, ValueNotValidError) as e:
            raise ConfigParseError(config_path, command, e)

        if "|" in command:
            command_sets.append(command)

    for command_set in command_sets:
        commands = command_set.split("|")
        parameters = config[command_set]

        for new_command in commands:
            new_command = new_command.strip()
            if not new_command:
                continue
            if new_command in config.sections():
                raise ConfigParseError(config_path, command_set, SubCommandAlreadyExists(new_command))
            config.add_section(new_command)
            for param_name in parameters:
                config.set(new_command, param_name, parameters[param_name])
    return config


def load_raw_auto_response_config(config_path: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.

    :param config_path: –ø—É—Ç—å –¥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∫–æ–º–∞–Ω–¥.

    :return: —Å–ø–∞—Ä—Å–µ–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∫–æ–º–∞–Ω–¥.
    """
    return create_config_obj(config_path)


def load_auto_delivery_config(config_path: str):
    """
    –ü–∞—Ä—Å–∏—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.

    :param config_path: –ø—É—Ç—å –¥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.

    :return: —Å–ø–∞—Ä—Å–µ–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.
    """
    try:
        config = create_config_obj(config_path)
    except configparser.DuplicateSectionError as e:
        raise ConfigParseError(config_path, e.section, DuplicateSectionErrorWrapper())

    for lot_title in config.sections():
        try:
            lot_response = check_param("response", config[lot_title])
            products_file_name = check_param("productsFileName", config[lot_title], raise_if_not_exists=False)
            check_param("disable", config[lot_title], valid_values=["0", "1"], raise_if_not_exists=False)
            check_param("disableAutoRestore", config[lot_title], valid_values=["0", "1"], raise_if_not_exists=False)
            check_param("disableAutoDisable", config[lot_title], valid_values=["0", "1"], raise_if_not_exists=False)
            check_param("disableAutoDelivery", config[lot_title], valid_values=["0", "1"], raise_if_not_exists=False)
            if products_file_name is None:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç, —Ç–æ –≤ —Ç–µ–∫—É—â–µ–º –ª–æ—Ç–µ –±–æ–ª–µ–µ –Ω–µ—á–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å -> –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥. –∏—Ç–µ—Ä–∞—Ü–∏—é.
                continue
        except (ParamNotFoundError, EmptyValueError, ValueNotValidError) as e:
            raise ConfigParseError(config_path, lot_title, e)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª.
        if not os.path.exists(f"storage/products/{products_file_name}"):
            raise ConfigParseError(config_path, lot_title,
                                   ProductsFileNotFoundError(f"storage/products/{products_file_name}"))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã 1 –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è $product –≤ —Ç–µ–∫—Å—Ç–µ response.
        if "$product" not in lot_response:
            raise ConfigParseError(config_path, lot_title, NoProductVarError())
    return config
